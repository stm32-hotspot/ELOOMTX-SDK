/**
 ******************************************************************************
 * @file   mx.h
 * @author STMicroelectronics - AIS - MCD Team
 * @brief  Project peripherals configuration files.
 *
 * This files declares the peripherals configuration parameters that can be used
 * in the Low Level API of an ODeV driver - IDrvInit(). It creates a link
 * between the initialization code generated by CubeMX (see the .ioc file
 * in the tools folder) and the ODeV framework.
 *
 * This example show how a managed task allocates an SPI driver that must be
 * connected to the SPI3 (that has been configured using CubeMX):
 * ~~~{.c}
 * p_task->p_driver = SPIMasterDriverAlloc();
 * if (p_task->p_driver != NULL)
 * {
 *   res = IDrvInit((IDriver*)p_task->p_driver, (void*)&MX_SPI3InitParams);
 *   if (SYS_IS_ERROR_CODE(res)) {
 *     SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("SPIBus task: error during driver initialization\r\n"));
 *   }
 * }
 * ~~~
 *
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2023 STMicroelectronics..
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
 
#ifndef INCLUDE_MX_MX_H_
#define INCLUDE_MX_MX_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "main.h"


/* Driver initialization parameters */
/************************************/
/**
  * GPIO Configuration parameters.
  */
typedef struct _MX_GPIOParams_t
{
  void (*p_mx_init_f)(void); /*!< MX GPIO initialization function */
  IRQn_Type irq_n; /*!< External interrupt number. */
  uint32_t pin;
  GPIO_TypeDef *port;
} MX_GPIOParams_t;

/**
  * TIM configuration parameters.
  */
typedef struct _MX_TIMParams_t
{
  TIM_HandleTypeDef *p_tim; /*!< HAL TIM handle */
  IRQn_Type irq_n; /*!< External interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX TIM initialization function */
} MX_TIMParams_t;

extern const MX_GPIOParams_t MX_GPIO_UBInitParams;
extern const MX_GPIOParams_t MX_GPIO_LED1InitParams;
extern const MX_GPIOParams_t MX_GPIO_LED2InitParams;
extern const MX_GPIOParams_t MX_GPIO_INT_STTInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT_MAGInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_ICLXInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_ICLXInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT2_DLPCInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_DLPCInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_DHCXInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT2_DHCXInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_DHCXInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT1_EXTERNAL_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_CS_EXTERNAL_DWBInitParams;
extern const MX_GPIOParams_t MX_GPIO_PA8InitParams;
extern const MX_GPIOParams_t MX_GPIO_PA0InitParams;
extern const MX_GPIOParams_t MX_GPIO_PD0InitParams;
extern const MX_GPIOParams_t MX_GPIO_INT_EXInitParams;
extern const MX_GPIOParams_t MX_GPIO_INT2_EXInitParams;

/**
  * TIM4 configuration parameters.
  */
extern const MX_TIMParams_t MX_TIM4InitParams;

/**
  * TIM5 configuration parameters.
  */
extern const MX_TIMParams_t MX_TIM5InitParams;

//extern const MX_PCDParams_t MX_PCDInitParams;


#ifdef __cplusplus
}
#endif

#endif /* INCLUDE_MX_MX_H_ */
